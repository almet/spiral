<?php

namespace Spiral\Framework\Persistence;

require_once('PHPUnit/Framework.php');
use \Spiral\Framework\Persistence\Fixtures\ORM\Backend\MockStorageEngine;
use \Spiral\Framework\Persistence\Fixtures\ORM\Conversion\MockMetaConverter;
use \Spiral\Framework\Persistence\Fixtures\ORM\MockUnitOfWork;

/**
 * ORM object repository test
 * 
 * @author		Frédéric Sureau <frederic.sureau@gmail.com>
 * @copyright	Frédéric Sureau 2009
 * @license		http://www.gnu.org/licenses/gpl.html GNU General Public License V3
 */
class ORMObjectRepositoryTest extends \PHPUnit_Framework_TestCase
{
	/**
	 * Storage engine
	 */
	protected $_storageEngine = null;
	
	/**
	 * Unit of work
	 */
	protected $_unitOfWork = null;
	
	/**
	 * Meta converter
	 */
	protected $_metaConverter = null;
	
	/**
	 * Object repository
	 */
	protected $_objectRepository = null;
	
	/**
	 * Sets up the testing environment
	 */
	public function setUp()
	{
		$this->_storageEngine = new MockStorageEngine();
		$this->_unitOfWork = new MockUnitOfWork();
		$this->_metaConverter = new MockMetaConverter();
		
		$this->_objectRepository = new ORMObjectRepository();
		$this->_objectRepository->setMetaConverter($this->_metaConverter);
		$this->_objectRepository->setStorageEngine($this->_storageEngine);
		$this->_objectRepository->setUnitOfWork($this->_unitOfWork);
		
		$this->_fixture = new \stdClass();
		$this->_fixture->firstName = 'James';
		$this->_fixture->lastName = 'Brown';
	}
	
	/**
	 * Test add unknown object
	 * 
	 * The meta object created by meta converter and OID generated by storage engine 
	 * must be registred as new in the unit of work.
	 */
	public function testAddUnknownObject()
	{
		$oid = $this->_objectRepository->add($this->_fixture);
		
		$waitRegistrations[] = array('NEW', $oid, $this->_fixture);
		
		$this->assertEquals($this->_unitOfWork->registrations, $waitRegistrations);
	}
	
	/**
	 * Test add known object
	 * 
	 * Add a second time an already added object.
	 * The unit of work should not be advertized a second time.
	 * The same OID should be returned each time.
	 */
	public function testAddKnownObject()
	{
		$oid1 = $this->_objectRepository->add($this->_fixture);
		$this->_unitOfWork->registrations = array();
		$oid2 = $this->_objectRepository->add($this->_fixture);
		
		$this->assertEquals($this->_unitOfWork->registrations, array());
		$this->assertEquals($oid1, $oid2);
	}
	
	/**
	 * Test to find an object just added
	 * 
	 * No call to the storage engine should be done.
	 */
	public function testFindJustAdded()
	{
		$oid = $this->_objectRepository->add($this->_fixture);
		$returnedObject = $this->_objectRepository->findByOID($oid);
		
		$this->assertEquals($this->_fixture, $returnedObject);
	}
	
	/**
	 * TODO : Test more :
	 * 
	 * - Delete relations when delete an object
	 * - Add relations when add an object
	 * - Add or remove relations when an object is dirty (probably relations changed)
	 * - Do not find an object that was just removed
	 * - Tests the "contains" method
	 */
	public function testMore()
	{
		$this->markTestIncomplete();
	}
}
