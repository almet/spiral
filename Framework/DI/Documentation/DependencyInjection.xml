<?xml version="1.0"?>
<!DOCTYPE book PUBLIC "-//OASIS//DTD DocBook XML V4.1.2//EN" "http://www.oasis-open.org/docbook/xml/4.1.2/docbookx.dtd">

<chapter>
	<title>Dependency injection</title>
	<para>
		Spiral dependency injector (DI) is a component that allow you to manage dependencies between 
		objects. It is an inversion of control (IoC) container, thus it gives you the full power to apply 
		the IoC pattern in your designs.
	</para>
	<para>
		It has many features that should let you use your existing classes without any change and let you manage 
		everything about your objects, since creation to dependencies injection and lifecycle management.
	</para>
	<para>
		Here is a quick list of what is possible to do with Spiral DI. More explaination 
		will be given in the following sections.
	</para>

	<itemizedlist>
		<listitem>
			<para>
				Multiple objects construction processes : direct instantiation, factory instance, static factory.
			</para>
		</listitem>
		<listitem>
			<para>
				Injection by constructor, by methods or by attributes. You can mix all the injection processes in a 
				single service as well.
			</para>
		</listitem>
		<listitem>
			<para>
				Injection of native PHP values (string, int, etc.), constants, class constants, objects, arrays.
			</para>
		</listitem>
		<listitem>
			<para>
				Management of objects scope : singleton or prototype.
			</para>
		</listitem>
		<listitem>
			<para>
				Easy manipulation of objects to inject the result of a method, or an attribute in another object.
			</para>
		</listitem>
		<listitem>
			<para>
				Inheritance system to factorize objects configuration.
			</para>
		</listitem>
		<listitem>
			<para>
				Directly inject the container in container aware objects.
			</para>
		</listitem>
		<listitem>
			<para>
				Callbacks on lifecycle events like "afterCreation".
			</para>
		</listitem>
		<listitem>
			<para>
				Aliasing an object with multiple names.
			</para>
		</listitem>
	</itemizedlist>
</chapter>
